"use strict";(self.webpackChunkcorsaircoalition_github_io=self.webpackChunkcorsaircoalition_github_io||[]).push([[177],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(a),d=r,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2077:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const o={},i="Network Protocol",l={unversionedId:"protocol",id:"protocol",title:"Network Protocol",description:"Channels / Topics",source:"@site/docs/3-protocol.md",sourceDirName:".",slug:"/protocol",permalink:"/protocol",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Python Bot Development",permalink:"/development"},next:{title:"Gameplay Data Analysis",permalink:"/analysis"}},s={},m=[{value:"Channels / Topics",id:"channels--topics",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Persistent Data in Redis",id:"persistent-data-in-redis",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"network-protocol"},"Network Protocol"),(0,r.kt)("h2",{id:"channels--topics"},"Channels / Topics"),(0,r.kt)("p",null,"The framework uses ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/"},"Redis")," message broker for all communication. The following channels are used:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"command"),": Send high-level commands to the bot (e.g. play, stop)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"state"),": Broadcast the current state of the game (e.g. joined, playing, won, lost)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"gameUpdate"),": Broadcast turn-by-turn game update deltas."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"action"),": Actions taken by the bot sent to the IO adapter (game server)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"recommendation"),": Action recommendations to communicate intended actions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"deconflict"),": Used to prevent multiple instances of a singleton component (e.g. IO adapter)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"turn"),": Clock signal during a game to enable other components to synchronize."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"discovery"),": Discover components for plug-and-play components (currently unused).")),(0,r.kt)("h2",{id:"data-structures"},"Data Structures"),(0,r.kt)("p",null,"The following data structures are used:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Game"),": Data types related to the game, such as the current phase and type of game, and the current state of the game."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GeneralsIO"),": Data types used for Generals.io server communication defined by the game developers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RedisData"),": Redis events and persistent data, such as commands, actions, recommendations, and game state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Config"),": Bot configuration elements, such as game and Redis settings.")),(0,r.kt)("p",null,"See details for each type in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CorsairCoalition/common/blob/main/src/types.d.ts"},"types definition file"),"."),(0,r.kt)("h2",{id:"persistent-data-in-redis"},"Persistent Data in Redis"),(0,r.kt)("p",null,"The framework computes the game state at each turn and stores this information persistently in Redis during a game to enable components to access the shared state on demand. The following information is persisted during the game and overwritten when a new game starts."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replay_id"),": The unique ID of the game used to retrieve the replay data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"turn"),": The current turn number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"height"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"size"),": Dimensions of the game grid."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"playerIndex"),": The player's index."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"teams"),": Team assignments for all players."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scores"),": Scoreboard of all players."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"usernames"),": List of usernames of all players."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chat_room"),": Unique ID for the chat room associated with this game."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"armies"),": Location of armies at each tile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ownGeneral"),": Location of player's own general."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enemyGeneral"),": Location of enemy's general."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"terrain"),": The terrain of the game grid."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cities"),": Location of cities on the game grid."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ownTiles"),": List of tiles owned by the player."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enemyTiles"),": List of tiles that belong to other players."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"discoveredTiles"),": List of tiles that have been discovered.")),(0,r.kt)("p",null,"The framework also aggregates turn-by-turn data for later analysis that is maintained after the game ends. The following lists contain aggregated data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scores"),": The scores of the players."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxArmyOnTile"),": The maximum army anywhere on the map."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"moveCount"),": The count of moves made thus far."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replays"),": Replay IDs of all games played.")),(0,r.kt)("h2",{id:"performance-considerations"},"Performance Considerations"),(0,r.kt)("p",null,"The framework is designed to be highly performant, but several factors can impact performance:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Network Latency"),": As the framework uses a Redis message broker for communication, network latency can affect the responsiveness of the bot. It is recommended to use a Redis server that is geographically close to the bot and game server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency"),": The framework supports concurrent execution of actions through topic-based channels. However, care must be taken to avoid conflicting actions that can overwhelm the game server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Redis Performance"),": The performance of the Redis server directly impacts the performance of the framework. Host Redis on a machine with sufficient memory to ensure minimal latency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AI Complexity"),": More complex AI algorithms can take longer to compute actions. Consider the game speed and the impact of the latency on the responsiveness of the bot.")))}u.isMDXComponent=!0}}]);