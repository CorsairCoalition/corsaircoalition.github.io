"use strict";(self.webpackChunkcorsaircoalition_github_io=self.webpackChunkcorsaircoalition_github_io||[]).push([[401],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>h});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},p="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,s=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=d(n),m=l,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(h,o(o({ref:e},u),{},{components:n})):a.createElement(h,o({ref:e},u))}));function h(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[p]="string"==typeof t?t:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9022:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const r={},o="Gameplay Data Analysis",i={unversionedId:"analysis",id:"analysis",title:"Gameplay Data Analysis",description:"In this section, we will showcase various examples of data analysis techniques that can be applied to your imported gameplay data. Through practical examples and code snippets, we will cover a range of analysis tasks, including generating statistics, visualizations, and comparing different agent strategies.",source:"@site/docs/4-analysis.md",sourceDirName:".",slug:"/analysis",permalink:"/analysis",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Python Bot Development",permalink:"/development"},next:{title:"Contribution Guide",permalink:"/contributing"}},s={},d=[{value:"Runnable Jupyter Notebook",id:"runnable-jupyter-notebook",level:2},{value:"Importing Gameplay Data",id:"importing-gameplay-data",level:2},{value:"Helper Functions",id:"helper-functions",level:2},{value:"Data Analysis Examples",id:"data-analysis-examples",level:2},{value:"Summary Statistics",id:"summary-statistics",level:3},{value:"Displaying turn-by-turn data",id:"displaying-turn-by-turn-data",level:3}],u={toc:d},p="wrapper";function c(t){let{components:e,...r}=t;return(0,l.kt)(p,(0,a.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gameplay-data-analysis"},"Gameplay Data Analysis"),(0,l.kt)("p",null,"In this section, we will showcase various examples of data analysis techniques that can be applied to your imported gameplay data. Through practical examples and code snippets, we will cover a range of analysis tasks, including generating statistics, visualizations, and comparing different agent strategies."),(0,l.kt)("h2",{id:"runnable-jupyter-notebook"},"Runnable Jupyter Notebook"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/CorsairCoalition/docs/blob/main/gg-analysis.ipynb"},"gg-analysis.ipynb")," for a fully functioning notebook that works with your local Redis instance."),(0,l.kt)("h2",{id:"importing-gameplay-data"},"Importing Gameplay Data"),(0,l.kt)("p",null,"Several helper functions are included below to assist in capturing data from both the Redis key-value store and directly from the GIO servers. We use extensive caching to expedite the data loading process after the initial data pull from the GIO servers."),(0,l.kt)("p",null,"The process begins by obtaining a list of replay IDs (these are stored in Redis). These replay IDs are then used to fetch the corresponding game data from Redis, using the specific bot ID and replay ID combination. The retrieved data is then organized into a dataframe, which focuses on a particular bot ID and includes data from all replay IDs."),(0,l.kt)("p",null,"After creating the dataframe, the we demonstate the analysis process proceeds by analyzing the performance of the a bot across different quadrants, along with other simple evaluations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"%pip install redis matplotlib numpy pandas\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# packages we use in our analysis process\nimport redis\nimport json\nimport os\nimport urllib.request\nimport pandas as pd\nfrom gior import gior\n\n# The following (optional) packages were used to analyze the gameplay data.\nimport matplotlib.pyplot as plt\nimport numpy as np\n")),(0,l.kt)("h2",{id:"helper-functions"},"Helper Functions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Code Block"),(0,l.kt)("p",null,(0,l.kt)("p",null,"The following code block contains the helper functions used to retrieve and format the gameplay datasets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def __separate_turn_by_turn_data__(scores_list, playerIndex):\n    armies = []\n    land = []\n    armies_enemy = []\n    land_enemy = []\n    victory = False\n\n    # Iterate through each turn\'s scores\n    for turn_data in scores_list:\n        turn_data_decoded = json.loads(turn_data.decode())\n\n        # Iterate through each player\'s data in the turn\n        for player_data in turn_data_decoded:\n            if player_data["dead"]:\n                victory = player_data["i"] != playerIndex\n\n                # Append data to the respective lists based on player index\n            if player_data["i"] == playerIndex:\n                armies.append(player_data["total"])\n                land.append(player_data["tiles"])\n            else:\n                armies_enemy.append(player_data["total"])\n                land_enemy.append(player_data["tiles"])\n\n                # Return the separated data\n    return armies, land, armies_enemy, land_enemy, victory\n\n\ndef __fetch_from_redis__(botId, replay_id):\n\n    FILE_REDIS = f"./cache/{botId}-{replay_id}.json"\n\n    # Check local cache first\n    if os.path.exists(FILE_REDIS):\n        with open(FILE_REDIS, "r") as f:\n            return json.load(f)\n\n    # Fetch data from Redis\n    response = r.hgetall(f"{botId}-{replay_id}")\n\n    # If response is empty, return None\n    if not response:\n        return None\n\n    data = {}\n\n    # Iterate through the response items and decode and store the data\n    for key, value in response.items():\n        key_str = key.decode()\n        data[key_str] = json.loads(value.decode())\n\n    # Fetch scores and separate the turn-by-turn data\n    scores_raw = r.lrange(f"{botId}-{replay_id}-scores", 0, -1)\n    (\n        data["armies_self"],\n        data["land_self"],\n        data["armies_enemy"],\n        data["land_enemy"],\n        data["victory"],\n    ) = __separate_turn_by_turn_data__(scores_raw, data["playerIndex"])\n    maxArmyOnTile = r.lrange(f"{botId}-{replay_id}-maxArmyOnTile", 0, -1)\n    moveCount = r.lrange(f"{botId}-{replay_id}-moveCount", 0, -1)\n    data["maxArmyOnTile"] = [json.loads(item.decode()) for item in maxArmyOnTile]\n    data["moveCount"] = [json.loads(item.decode()) for item in moveCount]\n\n    # Store the fetched data in the cache\n    with open(FILE_REDIS, "w") as f:\n        json.dump(data, f)\n\n    return data\n\n\ndef __fetch_from_server__(replay_id):\n\n    URL_NA = f"https://generalsio-replays-na.s3.amazonaws.com/{replay_id}.gior"\n    URL_BOT = f"https://generalsio-replays-bot.s3.amazonaws.com/{replay_id}.gior"\n    FILE_GIOR = f"./cache/gio-{replay_id}.gior"\n    FILE_JSON = f"./cache/gio-{replay_id}.json"\n\n    # If the JSON file exists, return its contents\n    if os.path.isfile(FILE_JSON):\n        with open(FILE_JSON, "r") as f:\n            return json.load(f)\n\n    # If the GIOR file does not exist, download it\n    if not os.path.isfile(FILE_GIOR):\n        try:\n            try:\n                # Attempt to download the GIOR file from the NA server URL\n                urllib.request.urlretrieve(URL_NA, FILE_GIOR)\n            except:\n                # If the NA server download fails, try the BOT server URL\n                urllib.request.urlretrieve(URL_BOT, FILE_GIOR)\n        except:\n            return None\n\n            # If the GIOR file still does not exist, return None\n    if not os.path.isfile(FILE_GIOR):\n        return None\n\n    data = gior.deserialize(FILE_GIOR)\n\n    # Cache the data to the JSON file\n    with open(FILE_JSON, "w") as f:\n        json.dump(data, f)\n\n    return data\n\n\ndef getQuadrant(location, width, height):\n    x = location % width\n    y = location // width\n\n    quadrant = 0\n    if y > height / 2:\n        quadrant += 2\n    if x > width / 2:\n        quadrant += 1\n\n    return quadrant\n\n# This is the main function used to collect data from Redis and the GIO servers.\n# you can see we created custom columns in our dataset (e.g., using the getQuadrant\n# method). You can customize this to fit your data needs.\ndef fetch_data(botId, replay_id):\n\n    data = __fetch_from_redis__(botId, replay_id)\n\n    if data is None:\n        return None\n\n    serverData = __fetch_from_server__(replay_id)\n\n    if serverData is None:\n        return None\n\n    # Update additional data in the fetched data\n    data["enemyGeneralLocated"] = data["enemyGeneral"] != -1\n    data["totalMoves"] = data["moveCount"][-1]\n    data["maxArmyOnTileEver"] = max(data["maxArmyOnTile"])\n\n    # Update enemy general information from the server data\n    enemyIndex = 1 - data["playerIndex"]\n    data["enemyGeneral"] = serverData["generals"][enemyIndex]\n\n    # Calculate own and enemy quadrant based on general locations\n    data["ownQuadrant"] = getQuadrant(data["ownGeneral"], data["width"], data["height"])\n    data["enemyQuadrant"] = getQuadrant(data["enemyGeneral"], data["width"], data["height"])\n\n    return data\n\n# This function reads data from Redis and the GIO servers and returns it as a pandas dataframe.\ndef generateDataFrame(botId):\n\n    # Retrieve all unique replay IDs from Redis\n    replay_ids = [x.decode(\'utf-8\').replace(\'"\',\'\') for x in r.lrange(botId + \'-replays\', 0, -1)]\n\n    # Fetch data from for each replay_id and store in a list\n    data_list = [fetch_data(botId, replay_id) for replay_id in replay_ids]\n\n    # Convert the list of dictionaries to a pandas DataFrame\n    df = pd.DataFrame(data_list)\n\n    # We chose to drop the columns that we ignored during our analsis.\n    df = df.drop(columns=[\n        \'chat_room\', \'options\', \'game_type\', \'lights\', \'swamps\',\n        \'playerColors\', \'usernames\', \'cities\', \'ownTiles\',\n        \'enemyTiles\', \'teams\', \'armies\', \'terrain\', \'discoveredTiles\'\n        ], errors=\'ignore\')\n\n    return df\n')))),(0,l.kt)("p",null,"The following code block will create a reference to the Redis instance running in the Docker container."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Create a Redis client to connect to the local Redis server instance\n\nr = redis.Redis(\n    host="localhost",\n    port=6379,\n    db = 0\n)\n\n# Ensure cache directory exists\nif not os.path.exists("./cache"):\n    os.makedirs("./cache")\n')),(0,l.kt)("p",null,"You can obtain your botId from Commander Cortex: It is an alphanumeric code printed in the upper right corner of the status block. It always starts with cortex-. This unique identifier is used to retrieve gameplay data from Redis and/or the GIO servers."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"botId = 'cortex-796tP1U' # Update this to match the Bot ID in Commander Cortex!\n\ndf = generateDataFrame(botId)\n\ndf.info()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 13 entries, 0 to 12\nData columns (total 20 columns):\n #   Column               Non-Null Count  Dtype\n---  ------               --------------  -----\n 0   width                13 non-null     int64\n 1   playerIndex          13 non-null     int64\n 2   height               13 non-null     int64\n 3   size                 13 non-null     int64\n 4   replay_id            13 non-null     object\n 5   turn                 13 non-null     int64\n 6   enemyGeneral         13 non-null     int64\n 7   ownGeneral           13 non-null     int64\n 8   armies_self          13 non-null     object\n 9   land_self            13 non-null     object\n 10  armies_enemy         13 non-null     object\n 11  land_enemy           13 non-null     object\n 12  victory              13 non-null     bool\n 13  maxArmyOnTile        13 non-null     object\n 14  moveCount            13 non-null     object\n 15  enemyGeneralLocated  13 non-null     bool\n 16  totalMoves           13 non-null     int64\n 17  maxArmyOnTileEver    13 non-null     int64\n 18  ownQuadrant          13 non-null     int64\n 19  enemyQuadrant        13 non-null     int64\ndtypes: bool(2), int64(11), object(7)\nmemory usage: 2.0+ KB\n")),(0,l.kt)("h2",{id:"data-analysis-examples"},"Data Analysis Examples"),(0,l.kt)("p",null,"In this section, we will provide an overview of the structure of the data collected using the GG framework and explain its key components. While the focus of this tutorial is not on performing extensive data analysis, understanding the structure of the data is crucial for effectively interpreting and utilizing it. By gaining insights into the data structure, you will be able to navigate and extract relevant information to evaluate your agent's performance and make informed decisions for further improvements."),(0,l.kt)("h3",{id:"summary-statistics"},"Summary Statistics"),(0,l.kt)("p",null,"First, we will compute some basic summary statistics and create simple visualizations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df.describe().T\n")),(0,l.kt)("div",null,(0,l.kt)("table",{border:"1",class:"dataframe"},(0,l.kt)("thead",null,(0,l.kt)("tr",{style:{"text-align":"right"}},(0,l.kt)("th",null),(0,l.kt)("th",null,"count"),(0,l.kt)("th",null,"mean"),(0,l.kt)("th",null,"std"),(0,l.kt)("th",null,"min"),(0,l.kt)("th",null,"25%"),(0,l.kt)("th",null,"50%"),(0,l.kt)("th",null,"75%"),(0,l.kt)("th",null,"max"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"width"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"20.000000"),(0,l.kt)("td",null,"1.683251"),(0,l.kt)("td",null,"18.0"),(0,l.kt)("td",null,"18.0"),(0,l.kt)("td",null,"20.0"),(0,l.kt)("td",null,"22.0"),(0,l.kt)("td",null,"22.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"playerIndex"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"1.000000"),(0,l.kt)("td",null,"0.000000"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"1.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"height"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"19.692308"),(0,l.kt)("td",null,"1.702186"),(0,l.kt)("td",null,"18.0"),(0,l.kt)("td",null,"18.0"),(0,l.kt)("td",null,"19.0"),(0,l.kt)("td",null,"21.0"),(0,l.kt)("td",null,"22.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"size"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"392.692308"),(0,l.kt)("td",null,"35.933700"),(0,l.kt)("td",null,"324.0"),(0,l.kt)("td",null,"378.0"),(0,l.kt)("td",null,"396.0"),(0,l.kt)("td",null,"399.0"),(0,l.kt)("td",null,"484.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"turn"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"241.923077"),(0,l.kt)("td",null,"114.917696"),(0,l.kt)("td",null,"93.0"),(0,l.kt)("td",null,"152.0"),(0,l.kt)("td",null,"198.0"),(0,l.kt)("td",null,"325.0"),(0,l.kt)("td",null,"490.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"enemyGeneral"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"161.538462"),(0,l.kt)("td",null,"143.937264"),(0,l.kt)("td",null,"0.0"),(0,l.kt)("td",null,"32.0"),(0,l.kt)("td",null,"118.0"),(0,l.kt)("td",null,"306.0"),(0,l.kt)("td",null,"392.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"ownGeneral"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"263.923077"),(0,l.kt)("td",null,"123.036215"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"176.0"),(0,l.kt)("td",null,"275.0"),(0,l.kt)("td",null,"362.0"),(0,l.kt)("td",null,"426.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"totalMoves"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"526.769231"),(0,l.kt)("td",null,"277.846527"),(0,l.kt)("td",null,"168.0"),(0,l.kt)("td",null,"295.0"),(0,l.kt)("td",null,"460.0"),(0,l.kt)("td",null,"754.0"),(0,l.kt)("td",null,"952.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"maxArmyOnTileEver"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"55.538462"),(0,l.kt)("td",null,"36.335509"),(0,l.kt)("td",null,"14.0"),(0,l.kt)("td",null,"22.0"),(0,l.kt)("td",null,"54.0"),(0,l.kt)("td",null,"71.0"),(0,l.kt)("td",null,"135.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"ownQuadrant"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"1.769231"),(0,l.kt)("td",null,"1.165751"),(0,l.kt)("td",null,"0.0"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"2.0"),(0,l.kt)("td",null,"3.0"),(0,l.kt)("td",null,"3.0")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"enemyQuadrant"),(0,l.kt)("td",null,"13.0"),(0,l.kt)("td",null,"1.076923"),(0,l.kt)("td",null,"0.954074"),(0,l.kt)("td",null,"0.0"),(0,l.kt)("td",null,"0.0"),(0,l.kt)("td",null,"1.0"),(0,l.kt)("td",null,"2.0"),(0,l.kt)("td",null,"3.0"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df.boxplot(vert=False)\nplt.show()\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"png",src:n(6596).Z,width:"683",height:"413"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# One point in for each game played\ndf.plot(kind = 'scatter', x='size', y='totalMoves')\nplt.show()\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"png",src:n(5792).Z,width:"571",height:"432"})),(0,l.kt)("h3",{id:"displaying-turn-by-turn-data"},"Displaying turn-by-turn data"),(0,l.kt)("p",null,"Several columns include turn-by-turn data (see Table 1 from the paper).\nBy unrolling these columns, we can analyze the trajectory of the capture data throughout a single game or across many games. The following plots show how this turn-by-turn data can be displayed quickly to gain interesting insights. These should serve as a starting point for further analysis."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def compare_army_strengths_by_turn_single_plot(game_index):\n    f, ax = plt.subplots()\n    ax.plot(df['armies_self'][game_index], color = '#6F90FF',label='self')\n    ax.plot(df['armies_enemy'][game_index], color = '#FF9370', label='opponent')\n    ax.set_title('Army Strength by Turn')\n    ax.set_xlabel('Turn Number')\n    ax.set_ylabel('Army Strength')\n    ax.legend(loc='upper left', title='Army')\n    plt.show()\n\ncompare_army_strengths_by_turn_single_plot(game_index = 0)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"png",src:n(1792).Z,width:"571",height:"455"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def compare_army_strengths_by_turn_separated():\n\n    f, ax = plt.subplots(len(df))\n\n    # Add one line plot for each game played\n    for i in range(len(df)):\n        ax[i].plot(df['armies_self'][i], color = '#6F90FF')\n        ax[i].plot(df['armies_enemy'][i], color = '#FF9370')\n        ax[i].set_yticklabels([]) #\n        ax[i].set_ylabel(f'Game {i}:            ', rotation=0)\n\n    ax[0].set_title('Self vs Enemy Army Strength by Turn\\n(One plot per game)')\n    ax[len(df)-1].set_xlabel('Turn Number')\n    plt.show()\n\ncompare_army_strengths_by_turn_separated()\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"png",src:n(3612).Z,width:"594",height:"476"})))}c.isMDXComponent=!0},6596:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/chart1-4438beb97a99e12752e864b330c22193.png"},5792:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/chart2-1cf83acd02c50ce65a2fab1c422285f4.png"},1792:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/chart3-3d3653d66348fe6eed6d867dc65a4221.png"},3612:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/chart4-7fb7526c6b4da1f4f276b3df1659d328.png"}}]);